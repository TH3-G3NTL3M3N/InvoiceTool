// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Company       Company?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  number    String
  vatNumber String
  email     String
  website   String
  country   String
  address   String
  postCode  String
  city      String
  iban      String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Customer Customer[]
  Product  Product[]
  Invoice  Invoice[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  includesVat Boolean   @default(false)
  price       Float     @default(0.0)
  currency    String    @default("EUR")
  vat         Float     @default(0.0)
  unit        String    @default("unit")
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  number       String
  vatNumber    String
  firstName    String
  lastName     String
  email        String
  country      String
  address      String
  postCode     String
  city         String
  paymentTerms Int
  companyId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

model Invoice {
  id           String        @id @default(cuid())
  status       InvoiceStatus @default(DRAFT)
  prefix       String        @default("")
  number       Int
  date         DateTime
  paymentTerms Int
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  InvoiceCompany  InvoiceCompany?
  InvoiceProduct  InvoiceProduct[]
  InvoiceCustomer InvoiceCustomer[]
}

model InvoiceCompany {
  id        String   @id @default(cuid())
  name      String
  number    String
  vatNumber String
  email     String
  website   String
  country   String
  address   String
  postCode  String
  city      String
  iban      String
  invoiceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoiceProduct {
  id          String    @id @default(cuid())
  name        String
  includesVat Boolean   @default(false)
  price       Float     @default(0.0)
  currency    String    @default("EUR")
  vat         Float     @default(0.0)
  unit        String    @default("unit")
  invoiceId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoiceCustomer {
  id        String    @id @default(cuid())
  name      String
  number    String
  vatNumber String
  firstName String
  lastName  String
  email     String
  country   String
  address   String
  postCode  String
  city      String
  invoiceId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
